name: Monkey CI

env:
  NODE_VERSION: "18.20.4"
  RECAPTCHA_SITE_KEY: "6Lc-V8McAAAAAJ7s6LGNe7MBZnRiwbsbiWts87aj"

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  pull_request:
    branches: [master]
    types: [opened, reopened, synchronize, ready_for_review]
  push:
    branches: [master]

concurrency:
  group: group-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  pre-ci:
    if: github.event.pull_request.draft == false
    name: pre-ci
    runs-on: ubuntu-latest
    outputs:
      should-build-be: ${{ steps.export-changes.outputs.should-build-be }}
      should-build-fe: ${{ steps.export-changes.outputs.should-build-fe }}
      should-build-pkg: ${{ steps.export-changes.outputs.should-build-pkg }}
      assets-json: ${{ steps.export-changes.outputs.assets-json }}

    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            json:
              - 'frontend/**/*.json'
            be-src:
              - 'backend/**/*.{ts,js,json,lua,css,html}'
              - 'backend/package.json'
            fe-src:
              - 'frontend/**/*.{ts,scss}'
              - 'frontend/package.json'
            pkg-src:
              - 'packages/**/*'
            anti-cheat:
              - 'backend/**/anticheat/**'

      - name: Check Anti-cheat
        if: steps.filter.outputs.anti-cheat == 'true'
        run: exit 1

      - name: Export changes
        id: export-changes
        run: |
          echo "should-build-pkg=${{ steps.filter.outputs.pkg-src }}" >> $GITHUB_OUTPUT
          echo "should-build-be=${{ steps.filter.outputs.be-src }}" >> $GITHUB_OUTPUT
          echo "should-build-fe=${{ steps.filter.outputs.fe-src }}" >> $GITHUB_OUTPUT
          echo "assets-json=${{ steps.filter.outputs.json }}" >> $GITHUB_OUTPUT

  prime-cache:
    name: prime-cache
    runs-on: ubuntu-latest
    needs: [pre-ci]
    if: needs.pre-ci.outputs.should-build-be == 'true' || needs.pre-ci.outputs.should-build-fe == 'true' || needs.pre-ci.outputs.should-build-pkg == 'true' || needs.pre-ci.outputs.assets-json == 'true'
    steps:
      - name: Checkout package-lock
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            package-lock.json

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Full checkout
        uses: actions/checkout@v4

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: npm install --prefer-offline --no-audit

  ci-be:
    name: ci-be
    needs: [pre-ci, prime-cache]
    runs-on: ubuntu-latest
    if: needs.pre-ci.outputs.should-build-be == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm install --prefer-offline --no-audit

      - name: Check pretty
        run: npm run pretty-code-be

      - name: Check lint
        run: npm run lint-be

      - name: Build
        run: npm run build-be

      - name: Test
        run: npm run test-be

  ci-fe:
    name: ci-fe
    needs: [pre-ci, prime-cache]
    runs-on: ubuntu-latest
    if: needs.pre-ci.outputs.should-build-fe == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create stub firebase config
        working-directory: ./frontend/src/ts/constants
        run: mv ./firebase-config-example.ts ./firebase-config.ts && cp ./firebase-config.ts ./firebase-config-live.ts

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm install --prefer-offline --no-audit

      - name: Check pretty
        run: npm run pretty-code-fe

      - name: Check lint
        run: npm run lint-fe

      - name: Build
        run: npm run build-fe

      - name: Test
        run: npm run test-fe

  ci-assets:
    name: ci-assets
    needs: [pre-ci, prime-cache]
    runs-on: ubuntu-latest
    if: needs.pre-ci.outputs.assets-json == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            language-json:
              - 'frontend/static/languages/*.json'
            quotes-json:
              - 'frontend/static/quotes/*.json'
            other-json:
              - 'frontend/static/funbox/*.json'
              - 'frontend/static/fonts/*.json'
              - 'frontend/static/themes/*.json'
              - 'frontend/static/challenges/*.json'
              - 'frontend/static/layouts/*.json'
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm install --prefer-offline --no-audit

      - name: Check Pretty
        run: npm run pretty-assets-fe

      - name: Lint JSON
        run: npm run pr-check-lint-json

      - name: Validate languages JSON
        if: steps.filter.outputs.language-json == 'true'
        run: npm run pr-check-language-json

      - name: Validate quotes JSON
        if: steps.filter.outputs.quotes-json == 'true'
        run: npm run pr-check-quote-json

      - name: Validate other JSON
        if: steps.filter.outputs.other-json == 'true'
        run: npm run pr-check-other-json

  ci-pkg:
    name: ci-pkg
    needs: [pre-ci, prime-cache]
    runs-on: ubuntu-latest
    if: needs.pre-ci.outputs.should-build-pkg == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm install --prefer-offline --no-audit

      - name: Check pretty
        run: npm run pretty-code-pkg

      - name: Check lint
        run: npm run lint-pkg

      - name: Build
        run: npm run build-pkg

      - name: Test
        run: npm run test-pkg

  on-failure:
    permissions: write-all
    name: on-failure
    runs-on: ubuntu-latest
    needs: [ci-be, ci-fe, ci-assets, ci-pkg]
    if: ${{ always() && contains(needs.*.result, 'failure') && github.ref != 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v4
      - name: Save the PR number in an artifact
        shell: bash
        env:
          PR_NUM: ${{ github.event.number }}
        run: echo $PR_NUM > pr_num.txt

      - name: Upload the PR number
        uses: actions/upload-artifact@v3
        with:
          name: pr_num
          path: ./pr_num.txt
