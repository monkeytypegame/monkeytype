{
  "name": "code_clojure",
  "noLazyMode": true,
  "words": [
    "def",
    "defn",
    "defmacro",
    "defonce",
    "defn-",
    "defmulti",
    "defmethod",
    "defprotocol",
    "defrecord",
    "defstruct",
    "deftype",
    "fn",
    "let",
    "loop",
    "recur",
    "if",
    "when",
    "when-not",
    "cond",
    "case",
    "condp",
    "do",
    "and",
    "or",
    "not",
    "nil",
    "true",
    "false",
    "ns",
    "require",
    "import",
    "use",
    "refer",
    "map",
    "filter",
    "reduce",
    "apply",
    "comp",
    "partial",
    "constantly",
    "identity",
    "first",
    "rest",
    "last",
    "butlast",
    "next",
    "take",
    "drop",
    "take-while",
    "drop-while",
    "conj",
    "cons",
    "concat",
    "reverse",
    "sort",
    "sort-by",
    "count",
    "empty?",
    "seq",
    "vec",
    "list",
    "set",
    "hash-map",
    "hash-set",
    "assoc",
    "dissoc",
    "get",
    "get-in",
    "assoc-in",
    "update-in",
    "merge",
    "keys",
    "vals",
    "contains?",
    "find",
    "select-keys",
    "zipmap",
    "into",
    "group-by",
    "frequencies",
    "distinct",
    "remove",
    "keep",
    "keep-indexed",
    "map-indexed",
    "doall",
    "dorun",
    "doseq",
    "dotimes",
    "for",
    "while",
    "repeatedly",
    "iterate",
    "cycle",
    "range",
    "repeat",
    "lazy-seq",
    "try",
    "catch",
    "finally",
    "throw",
    "str",
    "pr-str",
    "print",
    "println",
    "prn",
    "with-open",
    "slurp",
    "spit",
    "read-string",
    "atom",
    "ref",
    "agent",
    "var",
    "deref",
    "swap!",
    "reset!",
    "alter",
    "commute",
    "send",
    "send-off",
    "future",
    "promise",
    "deliver",
    "delay",
    "force",
    "pmap",
    "pcalls",
    "pvalues",
    "binding",
    "with-redefs",
    "with-meta",
    "meta",
    "vary-meta",
    "with-out-str",
    "with-in-str",
    "re-find",
    "re-matches",
    "re-seq",
    "re-pattern",
    "subs",
    "format",
    "join",
    "split",
    "split-lines",
    "trim",
    "triml",
    "trimr",
    "replace",
    "upper-case",
    "lower-case",
    "capitalize",
    "inc",
    "dec",
    "max",
    "min",
    "abs",
    "mod",
    "rem",
    "quot",
    "even?",
    "odd?",
    "zero?",
    "pos?",
    "neg?",
    "number?",
    "integer?",
    "float?",
    "rational?",
    "decimal?",
    "string?",
    "keyword?",
    "symbol?",
    "map?",
    "vector?",
    "list?",
    "set?",
    "coll?",
    "sequential?",
    "associative?",
    "sorted?",
    "counted?",
    "reversible?",
    "indexed?",
    "seqable?",
    "fn?",
    "ifn?",
    "class",
    "type",
    "instance?",
    "isa?",
    "cast",
    "satisfies?",
    "extends?",
    "supers",
    "bases",
    "class?",
    "resolve",
    "requiring-resolve",
    "find-var",
    "var-get",
    "var-set",
    "bound?",
    "thread-bound?",
    "make-array",
    "object-array",
    "aclone",
    "aget",
    "aset",
    "alength",
    "amap",
    "areduce"
  ]
}